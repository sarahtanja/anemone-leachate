---
title: "Find stable oxygen consumption & production rates from respirometry runs"
subtitle: ""
author: "Craig Norrie"
date: "`r format(Sys.time(), '%d %B, %Y')`"  
format:
  html:
    df-print: paged
    toc: true
    toc-location: right
    smooth-scroll: true
    link-external-icon: true
    link-external-newwindow: true
    code-fold: false
    code-tools: true
    code-copy: true
    highlight-style: breeze
    code-overflow: wrap
    theme: minty
editor: 
  markdown: 
    wrap: 72
---

This code will read in data from respirometry files that were produced
using the Fibox 4 PreSens respirometer. A .csv file containing each
probe/channel for each run should exist and a master log file with the
info for each animal should exist.

The respirometry data files should be named in order. i.e. the first
file should correspond to run #1

Familiarize yourself with the `respR` package [closed chamber
respirometry
vignette](https://januarharianto.github.io/respR/articles/closed.html#:~:text=There%20is%20a%20warning%20that%20the%20time%20data%20are%20not%20evenly%20spaced.%20This%20is%20a%20common%20warning%2C%20and%20in%20this%20case%20can%20be%20safely%20ignored.%20It%20results%20from%20using%20decimalised%20minutes%20as%20the%20time%20metric%2C%20which%20happen%20to%20be%20numerically%20unevenly%20spaced%2C%20but%20are%20perfectly%20usable%20as%20the%20time%20metric%20in%20respR)

Because the data we are working with should have a stable negative slope
in the first 30 minutes representing anemone & symbiont respiration, and
a stable positive slope in the last 30 minutes representing symbiont
photosynthesis, we need to split the data into these two slopes before
running it through the respR package so that the rolling rate regression
can be calculated for each slope.

The end goal is to get 55 respirometry rates and 55 photosynthesis rates
(two rates for each anemone). We also need to account for background in
each run by removing the rate of background oxygen consumption and
production occuring in the microbial activity of the seawater. For this
we want to make sure to use the rate, which is relative. We don't want
to subtract the actual oxygen reading of the blank from the experimental
chambers, because each chamber and each probe may vary slightly.

Since we are trying to capture the general background oxygen consumption
rate and oxygen production rate of the filtered seawater, here we choose
to average across all blanks and use 1 rate for each phase (respiration
& photosynthesis) to background adjust all of the experimental chambers.
There are other options for how to approach this, we could use the rate
for each run...

# Install and load packages

```{r}
# Install packages
if ("tidyverse" %in% rownames(installed.packages()) == 'FALSE') install.packages('tidyverse')
if ("dplyr" %in% rownames(installed.packages()) == 'FALSE') install.packages('dplyr')
if ("kableExtra" %in% rownames(installed.packages()) == 'FALSE') install.packages('kableExtra')
if ("lubridate" %in% rownames(installed.packages()) == 'FALSE') install.packages('lubridate')
if ("respR" %in% rownames(installed.packages()) == 'FALSE') install.packages('respR')

# Load packages
library(dplyr)
library(tidyverse)
library(kableExtra)
library(lubridate)
library(respR)
```

If respR is not available for your version of R...

### Install RTools

\*if it hasn't been already installed (otherwise, skip this step)

1.  Open <https://cran.r-project.org/>
2.  Select the necessary operating system for downloading the installer
    (e.g., Download R for Windows)
3.  Select `RTools`
4.  Select the latest version of RTools
5.  Wait for the completion of downloading
6.  Run the installer with all the options by default (here we may need
    to click Run anyway on the first pop-up window)
7.  For the new versions of R (v4.0.0), add
    PATH='\\\${RTOOLS40_HOME}\usr\bin;\${PATH}' to the .Renviron file by
    executing this code chunk:

```{r}
# For R v4.0.0 and newer, add RTools to PATH
if (grepl("^4\\.0\\.", R.version$version.string)) {
    # Get RTools40 home directory
    rtools_home <- Sys.getenv("RTOOLS40_HOME")
    
    # Add RTools40\usr\bin to PATH in .Renviron
    writeLines(paste0("PATH='", rtools_home, "\\usr\\bin;", Sys.getenv("PATH"), "'"), con = "~/.Renviron")
}
```

After installation is complete, you need to perform **one more step** to
be able to compile R packages: we put the location of the Rtools *make
utilities* (`bash`, `make`, etc) on the `PATH`. The easiest way to do so
is by creating a text file `.Renviron` in your Documents folder which
contains the following line:

```{r}
write('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', file = "~/.Renviron", append = TRUE)
```

::: callout-note
You should only have to set the RTools path once.
:::

### Use devtools to install `respR`

This install is not from CRAN, rather from the [`respR` github
repository](https://github.com/januarharianto/respR)

```{r}
if ("devtools" %in% rownames(installed.packages()) == 'FALSE') install.packages('devtools')

library(devtools)
# If package `respR` is not available for your r version download the package from github
devtools::install_github("januarharianto/respR")
```

::: callout-note
You should only have to install respR from devtools once.
:::

# Pull in data

Read in all the respirometry data from `.csv` files

```{r}
# Directory containing the CSV files from the respirometer
data_path <- "data"

# Get a list of all file's paths in the folder
all_files <- list.files(data_path, full.names = TRUE)

# Read in all CSV files, adding a run column 
all_data <- map2_df(all_files, seq_along(all_files), ~ read_csv(.x, skip = 1, show_col_types = FALSE) %>% # skips the first row
                                     slice(-c(n() - 1, n())) %>% #removes the last two rows
                                     mutate(filename = basename(.x),
                                            run = .y))
```

# Pull in metadata

```{r}
nem_metadata <- read_csv("../metadata/nem_metadata.csv")
resp_log <-  read_csv("../metadata/resp_log.csv")
```

Join metadata & log The resulting merged metadata files should have 66
rows (11 rows added for the 11 `blanks` in the respirometry runs)


> check if PP(A)_2 is run 4 or run 10, there are two PP(A)_1 records and no PP(A)_2 record for respirometry...temporarily called PP(A)_2 run 4 and PP(A)_1 run 10

```{r}
# Merge the metadata and log by the 'id'
merged_metadata <- full_join(nem_metadata, resp_log)

# Make channel a factor
merged_metadata$channel <- as.factor(merged_metadata$channel)

# Check that each channel is represented (1-5, & 7)
levels(merged_metadata$channel)
```

# Make `run` a factor

The `run` column will be what is used to merge the respirometry data
with the respirometry metadata and log later on in the script. Here, we
make the `run` column a factor.

```{r}
# Make each run a factor (not numeric) 
all_data$run <- as.factor(all_data$run)

# Check that `run` is the right data type (factor)
class(all_data$run)

# Check that each run is represented
levels(all_data$run)
```

# Make time numeric

Note that the `time.min` column for use in the `respR` package should be
numeric! In our dataframe,`delta_t` is the change in time. Here we will
make the `delta_t` (change in time) column numeric.

```{r}
# Make change in time numeric (not a character string)
all_data$delta_t <- as.numeric(all_data$delta_t)

# Check that delta_t is the right data type (numeric)
class(all_data$delta_t)
```

# Pivot wider

In order to do this we need each probe or channel to have its own oxygen
value column, like this example data from the respR package (in which
a,b,c,d, etc. are O2 measurements from different chambers):

```{r}
head(urchins.rd)
```

Now we need each probe from each run to have its own oxygen value
column. So this is going to need some filtering and restitching of our
data format from the PreSens software

Let's just pull out the things we want to keep track of: delta_T, Value,
Channel

```{r}
all_data %>% select(delta_t, run, Channel, Value) %>% 
    pivot_wider(names_from = Channel, values_from = Value)
```

This is how Craig did it: using a `for loop` and `pivot wider` to make
dataframes for each run

```{r}
# Gets a list of all the runs to filter by
run_list <- levels(all_data$run)

# Use a for loop to select the columns from each run and create a new dataframe for each
for(i in 1:length(run_list)){
  
  df <- all_data %>% select(delta_t,Channel,Value, run) %>% 
    filter(run == run_list[i])
  
  df <- df %>% select(delta_t, Channel, Value) %>% 
    pivot_wider(names_from = Channel, values_from = Value)
  
  df$delta_t <- as.numeric(df$delta_t)
  
  assign(paste('run_',i,sep=''),df)
  
  }
```

We now have a dataframe for each respirometry run.

The samples should have been taken every 10 seconds, but for some reason
they don't time up with each other (and they should...?)

# Inspect each run

```{r}
for(i in 1:11){
run_num <- paste0("run_", i) # 
inspect(get(run_num), time = 1, oxygen = 2:7) # This is for the 6 probe setup
}
```

> "There is a warning that the time data are not evenly spaced. This is
> a common warning, and in this case can be safely ignored. It results
> from using decimalised minutes as the time metric, which happen to be
> numerically unevenly spaced, but are perfectly usable as the time
> metric in respR.
>
> Rather than make assumptions that rows represent evenly spaced
> datapoints, the functions in `respR` use actual time values for
> analyses and rate calculations, and so even irregularly spaced data
> are analysed correctly. Such warnings are for informative purposes: to
> make the user aware of unusual data gaps, and also to remind users
> that if they use row numbers for manual operations such as subsetting,
> the same row width in different parts of the data may not necessarily
> represent the same time period." - [respR closed chamber respirometry
> vignette](https://januarharianto.github.io/respR/articles/closed.html#:~:text=There%20is%20a%20warning%20that%20the%20time%20data%20are%20not%20evenly%20spaced.%20This%20is%20a%20common%20warning%2C%20and%20in%20this%20case%20can%20be%20safely%20ignored.%20It%20results%20from%20using%20decimalised%20minutes%20as%20the%20time%20metric%2C%20which%20happen%20to%20be%20numerically%20unevenly%20spaced%2C%20but%20are%20perfectly%20usable%20as%20the%20time%20metric%20in%20respR).

# Subset for respiration

Subset for respiration data by filtering time delta_t \<= 30, since the
first 30 minutes were in the dark. I also trim off the first 5 minute to
account for acclimation to the chambers and thermal stabilization.

```{r}
# Loop through each run_i
for (i in 1:11){
  run_num <- paste0("run_", i)
  resp_name <- paste0("resp_", run_num)
  
  # Filter the current run_i dataframe and store it as resp_run_i
  assign(resp_name, get(run_num) %>% 
  filter(delta_t < 30, delta_t > 1)) 
    # time greater than 1 min less than 30 mins *beware the bubble
}
```

# Subset for photosynthesis

The lights were turned on after 30 minutes, and the respirometry was
ended at about a total of 60 minutes (though some runs ran longer). Here
I trim between 35 and 60, to give 5 minutes of 'light phase'
acclimation.

```{r}
# Loop through each run_i
for (i in 1:11){
  run_num <- paste0("run_", i)
  resp_name <- paste0("phot_", run_num)
  
  # Filter the current run_i dataframe and store it as resp_run_i
  assign(resp_name, get(run_num) %>% 
  filter(delta_t > 38, delta_t < 60 ))
  
}
```

# Background

[calc_rate.bg - calculate background
oxygen](https://januarharianto.github.io/respR/articles/closed.html#summary:~:text=calc_rate.bg%20%2D%20calculate%20background%20oxygen)

> The presence of micro-organisms and their oxygen use may be a
> potential source of experimental bias, and we usually want to account
> for background respiration rates during experiments by conducting
> empty or “blank” control experiments with no specimens to quantify it.

## Respiration background

Lets calculate the background for each run in the oxygen consumption
portion of the respirometry test

Make a dataframe of the 'blanks'

```{r}
resp_blanks <- resp_log %>% 
  filter(id == "blank") %>% 
  select(id, run, channel)

resp_blanks
```

Use it to get the background for each resp_run and remove the blank from
each respiration run dataset

```{r}
# 1
# first calculate the background rate
# This one starts oxygen production at min 25
resp_run_1 <- resp_run_1 %>% filter(delta_t < 25)
bg_insp <- inspect(resp_run_1, time = 1, oxygen = "7")
bg_rate_resp_1 <- calc_rate.bg(bg_insp)
# then remove the background blank from the dataset
resp_run_1 <- resp_run_1 %>%  select(-"7")

# 2
bg_insp <- inspect(resp_run_2, time = 1, oxygen = "2")
bg_rate_resp_2 <- calc_rate.bg(bg_insp)
resp_run_2 <- resp_run_2 %>%  select(-"2")

# 3
# This one starts oxygen production at min 25
resp_run_3 <- resp_run_3 %>% filter (delta_t < 25)
bg_insp <- inspect(resp_run_3, time = 1, oxygen = "4")
bg_rate_resp_3 <- calc_rate.bg(bg_insp)
resp_run_3 <- resp_run_3 %>%  select(-"4")

# 4
bg_insp <- inspect(resp_run_4, time = 1, oxygen = "1")
bg_rate_resp_4 <- calc_rate.bg(bg_insp)
resp_run_4 <- resp_run_4 %>%  select(-"1")

# 5
bg_insp <- inspect(resp_run_5, time = 1, oxygen = "3")
bg_rate_resp_5 <- calc_rate.bg(bg_insp)
resp_run_5 <- resp_run_5 %>%  select(-"3")

# 6
bg_insp <- inspect(resp_run_6, time = 1, oxygen = "5")
bg_rate_resp_6 <- calc_rate.bg(bg_insp)
resp_run_6 <- resp_run_6 %>%  select(-"5")

# 7
bg_insp <- inspect(resp_run_7, time = 1, oxygen = "7")
bg_rate_resp_7 <- calc_rate.bg(bg_insp)
resp_run_7 <- resp_run_7 %>%  select(-"7")

# 8
bg_insp <- inspect(resp_run_8, time = 1, oxygen = "5")
bg_rate_resp_8 <- calc_rate.bg(bg_insp)
resp_run_8 <- resp_run_8 %>%  select(-"5")

# 9
bg_insp <- inspect(resp_run_9, time = 1, oxygen = "4")
bg_rate_resp_9 <- calc_rate.bg(bg_insp)
resp_run_9 <- resp_run_9 %>%  select(-"4")

# 10
bg_insp <- inspect(resp_run_10, time = 1, oxygen = "3")
bg_rate_resp_10 <- calc_rate.bg(bg_insp)
resp_run_10 <- resp_run_10 %>%  select(-"3")

# 11
# Bad data at beginning needs to be trimmed
resp_run_11 <- resp_run_11 %>% filter(delta_t > 6)
bg_insp <- inspect(resp_run_11, time = 1, oxygen = "2")
bg_rate_resp_11 <- calc_rate.bg(bg_insp)
resp_run_11 <- resp_run_11 %>%  select(-"2")
```

### Normality check

```{r}
bg.rates <- c(
  bg_rate_resp_1$summary$rate.bg,
bg_rate_resp_2$summary$rate.bg,
bg_rate_resp_3$summary$rate.bg,
bg_rate_resp_4$summary$rate.bg,
bg_rate_resp_5$summary$rate.bg,
bg_rate_resp_6$summary$rate.bg,
bg_rate_resp_7$summary$rate.bg,
bg_rate_resp_8$summary$rate.bg,
bg_rate_resp_9$summary$rate.bg,
bg_rate_resp_10$summary$rate.bg,
bg_rate_resp_11$summary$rate.bg)

run <- c(1:11)

resp_bg <- tibble(run, bg.rates)
```

```{r}
hist(resp_bg$bg.rates)
```

```{r}
if ("car" %in% rownames(installed.packages()) == 'FALSE') install.packages('car')
library(car)
qqPlot(resp_bg$bg.rates)
```

## Photosynthesis background

The chambers that were blanks are the same

```{r}
# 1
# first calculate the background rate
bg_insp <- inspect(phot_run_1, time = 1, oxygen = "7")
bg_rate_phot_1 <- calc_rate.bg(bg_insp)
# then remove the background blank from the dataset
phot_run_1 <- phot_run_1 %>%  select(-"7")

# 2
bg_insp <- inspect(phot_run_2, time = 1, oxygen = "2")
bg_rate_phot_2 <- calc_rate.bg(bg_insp)
phot_run_2 <- phot_run_2 %>%  select(-"2")

# 3
# bad data at beginning
phot_run_3 <- phot_run_3 %>% filter(delta_t > 50)
bg_insp <- inspect(phot_run_3, time = 1, oxygen = "4")
bg_rate_phot_3 <- calc_rate.bg(bg_insp)
phot_run_3 <- phot_run_3 %>%  select(-"4")

# 4
bg_insp <- inspect(phot_run_4, time = 1, oxygen = "1")
bg_rate_phot_4 <- calc_rate.bg(bg_insp)
phot_run_4 <- phot_run_4 %>%  select(-"1")

# 5
bg_insp <- inspect(phot_run_5, time = 1, oxygen = "3")
bg_rate_phot_5 <- calc_rate.bg(bg_insp)
phot_run_5 <- phot_run_5 %>%  select(-"3")

# 6
bg_insp <- inspect(phot_run_6, time = 1, oxygen = "5")
bg_rate_phot_6 <- calc_rate.bg(bg_insp)
phot_run_6 <- phot_run_6 %>%  select(-"5")

# 7
bg_insp <- inspect(phot_run_7, time = 1, oxygen = "7")
bg_rate_phot_7 <- calc_rate.bg(bg_insp)
phot_run_7 <- phot_run_7 %>%  select(-"7")

# 8
# bad data at end
phot_run_8 <- phot_run_8 %>% filter(delta_t < 53)
bg_insp <- inspect(phot_run_8, time = 1, oxygen = "5")
bg_rate_phot_8 <- calc_rate.bg(bg_insp)
phot_run_8 <- phot_run_8 %>%  select(-"5")

# 9
bg_insp <- inspect(phot_run_9, time = 1, oxygen = "4")
bg_rate_phot_9 <- calc_rate.bg(bg_insp)
phot_run_9 <- phot_run_9 %>%  select(-"4")

# 10
bg_insp <- inspect(phot_run_10, time = 1, oxygen = "3")
bg_rate_phot_10 <- calc_rate.bg(bg_insp)
phot_run_10 <- phot_run_10 %>%  select(-"3")

# 11
bg_insp <- inspect(phot_run_11, time = 1, oxygen = "2")
bg_rate_phot_11 <- calc_rate.bg(bg_insp)
phot_run_11 <- phot_run_11 %>%  select(-"2")

```

### Normality check

```{r}
phot.bg.rates <- c(
  bg_rate_phot_1$summary$rate.bg,
bg_rate_phot_2$summary$rate.bg,
bg_rate_phot_3$summary$rate.bg,
bg_rate_phot_4$summary$rate.bg,
bg_rate_phot_5$summary$rate.bg,
bg_rate_phot_6$summary$rate.bg,
bg_rate_phot_7$summary$rate.bg,
bg_rate_phot_8$summary$rate.bg,
bg_rate_phot_9$summary$rate.bg,
bg_rate_phot_10$summary$rate.bg,
bg_rate_phot_11$summary$rate.bg)

run <- c(1:11)

phot_bg <- tibble(run, phot.bg.rates)
```

```{r}
hist(phot_bg$phot.bg.rates)
```

```{r}
qqPlot(phot_bg$phot.bg.rates)
```

# Extract rates in `respR`

This section we will use nested loops to calculate the rates and
background-adjusted rates for respiration & photosynthesis.

> To extract rates, it is best to assign each time-oxygen column pair
> individually as a separate inspect object.- [respR closed-chamber
> respirometry
> vignette](https://januarharianto.github.io/respR/articles/closed.html#:~:text=There%20is%20a%20warning%20that%20the%20time%20data%20are%20not%20evenly%20spaced.%20This%20is%20a%20common%20warning%2C%20and%20in%20this%20case%20can%20be%20safely%20ignored.%20It%20results%20from%20using%20decimalised%20minutes%20as%20the%20time%20metric%2C%20which%20happen%20to%20be%20numerically%20unevenly%20spaced%2C%20but%20are%20perfectly%20usable%20as%20the%20time%20metric%20in%20respR)

## A note on adjusting rates by blanks

Follow the examples detailed in the [adjust_rate: Adjusting rates for
background](https://januarharianto.github.io/respR/articles/adjust_rate.html#adjintro)
`respR` vignette.

> **When should adjustments be applied**?
>
> In the `respR` workflow, `adjust_rate` should be used on rates which
> have been determined in `calc_rate`, `calc_rate.int`, `auto_rate`, or
> `auto_rate.int` or rate values (change in oxygen units per unit time)
> otherwise determined from the raw data, but before they are converted
> in `convert_rate`.
>
> However, **adjustment of rates is an optional step**. While it is
> extremely important to determine and quantify background oxygen use or
> production, many respirometry experiments find it to be negligible in
> comparison to specimen rates because equipment is kept clean and
> filtered or sterilised water is used, and adjustments are unnecessary
> (e.g. [Burford et
> al. 2019](https://januarharianto.github.io/respR/articles/refs.html#references)).

Our data follows the [Case 3: Mulitple specimen chambers and a single
control](https://januarharianto.github.io/respR/articles/adjust_rate.html#case-3-multiple-specimen-chambers-and-a-single-control)
for each run.

## Respirometry

oxygen consumption!

Using a nested loop

```{r}
# Create an empty data frame to store the rates
resp_rates <- data.frame(run = integer(), channel = factor())

# Loop through respirometry runs
for (i in 1:11) {
  # run_num will look like `resp_run_1`, 'resp_run_2', 'resp_run_3', etc.
  run_num <- paste0("resp_run_", i)
  
  # the background object for each run
  blank <- paste0("bg_rate_resp_", i)
  
  # Create an empty data frame to store rates for this run
  stored_rates <- data.frame(run = integer(), 
                        channel = factor(), 
                        auto_resp_rate = numeric(), 
                        auto_resp_r2 = numeric()
                        )
  
  for (j in 2:6) {
    df <- get(run_num) %>%
      select(1, j) %>%
      drop_na()
    
    # use respR inspect() and save it to object `inspected`
    inspected <- inspect(df, time = "delta_t", oxygen = 2)
    
    # pass object `inspected` through respR `auto_rate()`
    auto_rated <- auto_rate(inspected)
    
    # calculate adjusted rate based on run background/blank
    auto_bg_adj <- adjust_rate(auto_rated, by = get(blank), method = "mean")
    
    # Create a data frame to store the rate object information 
    stored_rates_channels <- data.frame(
      run = i,
      channel = as.factor(colnames(get(run_num))[j]),
      auto_resp_rate = auto_rated$summary$rate[1],
      auto_resp_r2 = auto_rated$summary$rsq[1],
      resp_bg_adj_rate = auto_bg_adj$summary$rate.adjusted[1]
      )
    
    # Append the rates for this channel to the stored_rates dataframe
    stored_rates <- bind_rows(stored_rates, stored_rates_channels)
  }
  
  # Append the rates for this run to the resp_rates data frame
  resp_rates <- bind_rows(resp_rates, stored_rates)
}
 
```

### Inspect data

```{r}
hist(resp_rates$auto_resp_rate)
```

```{r}
hist(resp_rates$resp_bg_adj_rate)
```

When I adjust the rates for background, it turns the rates mostly
positive... what is producing oxygen in the dark in the chambers? This
makes it seem like the signature in the chambers were primarily
background, and the anemones were barely breathing... less than the
filtered seawater!?

## Join resp_rates to merged_metadata

```{r}
resp_rates <- left_join(resp_rates, merged_metadata)
```

## QAQC respiration rates

```{r}
# filter for rates that are positive
resp_badrates <- resp_rates %>% filter(auto_resp_rate > 0 )

print(resp_badrates)
```

```{r}
# filter for r2 values that are below 0.8
resp_badr2 <- resp_rates %>% filter(auto_resp_r2 < 0.8)
print(resp_badr2)
```

```{r}
resp_baddies <- full_join(resp_badr2, resp_badrates)

# Print a pretty table
resp_baddies %>%
  select(run, channel) %>%
  arrange(run, channel) %>% 
  kable(caption = "Respiration Trouble", format = "html", 
        col.names = c("Run", "Channel")) %>%
  kable_styling(full_width = FALSE)
```

Inspect the 'bad data' individually

#### 2.3

```{r}
resp_run_2 %>% select('delta_t', '3') %>% drop_na() %>% 
inspect(time = 'delta_t', oxygen = '3') %>%  auto_rate()
```

```{r}
new2.3 <-  resp_run_2 %>%
  inspect(time = 'delta_t', oxygen = '3') %>%
  calc_rate(from = 0, to = 5, by = 'time')
```

```{r}
### ONLY CHANGE THESE VALUES ###
new.calc <- new2.3
this.run <- 2
this.channel <- 3
################################

new.rate <- new.calc$summary$rate[1]
new.rsq <- new.calc$summary$rsq[1]

blank <- paste0("bg_rate_resp_", this.run)
# new background adjusted object
new.adj <- adjust_rate(new.calc, by = get(blank), method = "mean") 
# from the background-adjusted object, pull the adjusted rate
new.bg.adj.rate <- new.adj$summary$rate.adjusted[1]

# Add qaqc value to new column based on conditions in 'run' and 'channel' columns
resp_rates <- resp_rates %>%
  mutate(
    qaqc_rate = ifelse(run == this.run &
                         channel == this.channel, new.rate, NA),
    qaqc_r2 = ifelse(run == this.run &
                       channel == this.channel, new.rsq, NA),
    qaqc_bg_adj_rate = ifelse(run == this.run &
                       channel == this.channel, new.bg.adj.rate, NA)
  )



filter(resp_rates, run == this.run & channel == this.channel) %>% select("run", "channel", "id", "treatment", "qaqc_rate", "qaqc_r2", "qaqc_bg_adj_rate")
```

#### 2.4

```{r}
resp_run_2 %>% select('delta_t', '4') %>% drop_na() %>% 
inspect(time = 'delta_t', oxygen = '4') %>%  auto_rate()
```

```{r}
new2.4 <-  resp_run_2 %>%
  inspect(time = 'delta_t', oxygen = '4') %>%
  calc_rate(from = 0, to = 7, by = 'time')
```

```{r}
### ONLY CHANGE THESE VALUES ###
new.calc <- new2.4
this.run <- 2
this.channel <- 4
################################

new.rate <- new.calc$summary$rate[1]
new.rsq <- new.calc$summary$rsq[1]

blank <- paste0("bg_rate_resp_", this.run)
# new background adjusted object
new.adj <- adjust_rate(new.calc, by = get(blank), method = "mean") 
# from the background-adjusted object, pull the rate
new.bg.adj.rate <- new.adj$summary$rate.adjusted[1]
  
# Add qaqc value to new column based on conditions in 'run' and 'channel' columns
resp_rates <- resp_rates %>%
  mutate(
    qaqc_rate = ifelse(run == this.run &
                         channel == this.channel, new.rate, qaqc_rate),
    qaqc_r2 = ifelse(run == this.run &
                       channel == this.channel, new.rsq, qaqc_r2),
    qaqc_bg_adj_rate = ifelse(run == this.run &
                       channel == this.channel, new.bg.adj.rate, qaqc_bg_adj_rate)
  )


filter(resp_rates, run == this.run & channel == this.channel) %>% select("run", "channel", "id", "treatment", "qaqc_rate", "qaqc_r2", "qaqc_bg_adj_rate")
```

#### 6.3

```{r}
resp_run_6 %>% select('delta_t', '3') %>% drop_na() %>% 
inspect(time = 'delta_t', oxygen = '3') %>%  auto_rate()
```

```{r}
new6.3 <-  resp_run_6 %>%
  inspect(time = 'delta_t', oxygen = '3') %>%
  calc_rate(from = 0, to = 15, by = 'time')
```

```{r}
### ONLY CHANGE THESE VALUES ###
new.calc <- new6.3
this.run <- 6
this.channel <- 3
################################

new.rate <- new.calc$summary$rate[1]
new.rsq <- new.calc$summary$rsq[1]

blank <- paste0("bg_rate_resp_", this.run)
# new background adjusted object
new.adj <- adjust_rate(new.calc, by = get(blank), method = "mean") 
# from the background-adjusted object, pull the adjusted rate
new.bg.adj.rate <- new.adj$summary$rate.adjusted[1]

  
# Add qaqc value to new column based on conditions in 'run' and 'channel' columns
resp_rates <- resp_rates %>%
  mutate(
    qaqc_rate = ifelse(run == this.run &
                         channel == this.channel, new.rate,  qaqc_rate),
    qaqc_r2 = ifelse(run == this.run &
                       channel == this.channel, new.rsq,  qaqc_r2),
    qaqc_bg_adj_rate = ifelse(run == this.run &
                       channel == this.channel, new.bg.adj.rate, qaqc_bg_adj_rate)
  )


filter(resp_rates, run == this.run & channel == this.channel) %>% select("run", "channel", "id", "treatment", "qaqc_rate", "qaqc_r2", "qaqc_bg_adj_rate")
```

#### 6.7

```{r}
resp_run_6 %>% select('delta_t', '7') %>% drop_na() %>% 
inspect(time = 'delta_t', oxygen = '7') %>%  auto_rate()
```

```{r}
new6.7 <-  resp_run_6 %>%
  inspect(time = 'delta_t', oxygen = '7') %>%
  calc_rate(from = 0, to = 12, by = 'time')
```

```{r}
### ONLY CHANGE THESE VALUES ###
new.calc <- new6.7
this.run <- 6
this.channel <- 7
################################

new.rate <- new.calc$summary$rate[1]
new.rsq <- new.calc$summary$rsq[1]

blank <- paste0("bg_rate_resp_", this.run)
# new background adjusted object
new.adj <- adjust_rate(new.calc, by = get(blank), method = "mean") 
# from the background-adjusted object, pull the rate
new.bg.adj.rate <- new.adj$summary$rate.adjusted[1]
  
# Add qaqc value to new column based on conditions in 'run' and 'channel' columns
resp_rates <- resp_rates %>%
  mutate(
    qaqc_rate = ifelse(run == this.run &
                         channel == this.channel, new.rate, qaqc_rate),
    qaqc_r2 = ifelse(run == this.run &
                       channel == this.channel, new.rsq, qaqc_r2),
    qaqc_bg_adj_rate = ifelse(run == this.run &
                       channel == this.channel, new.bg.adj.rate, qaqc_bg_adj_rate)
  )

filter(resp_rates, run == this.run & channel == this.channel) %>% select("run", "channel", "id", "treatment", "qaqc_rate", "qaqc_r2", "qaqc_bg_adj_rate")
```

#### 10.1
```{r}
resp_run_10 %>% select('delta_t', '1') %>% drop_na() %>% 
inspect(time = 'delta_t', oxygen = '1') %>%  auto_rate()
```

```{r}
new10.1 <-  resp_run_10 %>%
  inspect(time = 'delta_t', oxygen = '1') %>%
  calc_rate(from = 0, to = 12, by = 'time')
```

```{r}
### ONLY CHANGE THESE VALUES ###
new.calc <- new10.1
this.run <- 10
this.channel <- 1
################################

new.rate <- new.calc$summary$rate[1]
new.rsq <- new.calc$summary$rsq[1]

blank <- paste0("bg_rate_resp_", this.run)
# new background adjusted object
new.adj <- adjust_rate(new.calc, by = get(blank), method = "mean") 
# from the background-adjusted object, pull the rate
new.bg.adj.rate <- new.adj$summary$rate.adjusted[1]
  
# Add qaqc value to new column based on conditions in 'run' and 'channel' columns
resp_rates <- resp_rates %>%
  mutate(
    qaqc_rate = ifelse(run == this.run &
                         channel == this.channel, new.rate, qaqc_rate),
    qaqc_r2 = ifelse(run == this.run &
                       channel == this.channel, new.rsq, qaqc_r2),
    qaqc_bg_adj_rate = ifelse(run == this.run &
                       channel == this.channel, new.bg.adj.rate, qaqc_bg_adj_rate)
  )

filter(resp_rates, run == this.run & channel == this.channel) %>% select("run", "channel", "id", "treatment", "qaqc_rate", "qaqc_r2", "qaqc_bg_adj_rate")
```


#### 10.2

```{r}
resp_run_10 %>% select('delta_t', '2') %>% drop_na() %>% 
inspect(time = 'delta_t', oxygen = '2') %>%  auto_rate()
```

```{r}
new10.2 <-  resp_run_10 %>%
  inspect(time = 'delta_t', oxygen = '2') %>%
  calc_rate(from = 0, to = 12, by = 'time')
```

```{r}
### ONLY CHANGE THESE VALUES ###
new.calc <- new10.2
this.run <- 10
this.channel <- 2
################################

new.rate <- new.calc$summary$rate[1]
new.rsq <- new.calc$summary$rsq[1]

blank <- paste0("bg_rate_resp_", this.run)
# new background adjusted object
new.adj <- adjust_rate(new.calc, by = get(blank), method = "mean") 
# from the background-adjusted object, pull the rate
new.bg.adj.rate <- new.adj$summary$rate.adjusted[1]
  
# Add qaqc value to new column based on conditions in 'run' and 'channel' columns
resp_rates <- resp_rates %>%
  mutate(
    qaqc_rate = ifelse(run == this.run &
                         channel == this.channel, new.rate, qaqc_rate),
    qaqc_r2 = ifelse(run == this.run &
                       channel == this.channel, new.rsq, qaqc_r2),
    qaqc_bg_adj_rate = ifelse(run == this.run &
                       channel == this.channel, new.bg.adj.rate, qaqc_bg_adj_rate)
  )

filter(resp_rates, run == this.run & channel == this.channel) %>% select("run", "channel", "id", "treatment", "qaqc_rate", "qaqc_r2", "qaqc_bg_adj_rate")
```

#### 10.4
```{r}
resp_run_10 %>% select('delta_t', '4') %>% drop_na() %>% 
inspect(time = 'delta_t', oxygen = '4') %>%  auto_rate()
```

```{r}
new10.4 <-  resp_run_10 %>%
  inspect(time = 'delta_t', oxygen = '4') %>%
  calc_rate(from = 0, to = 12, by = 'time')
```

```{r}
### ONLY CHANGE THESE VALUES ###
new.calc <- new10.4
this.run <- 10
this.channel <- 4
################################

new.rate <- new.calc$summary$rate[1]
new.rsq <- new.calc$summary$rsq[1]

blank <- paste0("bg_rate_resp_", this.run)
# new background adjusted object
new.adj <- adjust_rate(new.calc, by = get(blank), method = "mean") 
# from the background-adjusted object, pull the rate
new.bg.adj.rate <- new.adj$summary$rate.adjusted[1]
  
# Add qaqc value to new column based on conditions in 'run' and 'channel' columns
resp_rates <- resp_rates %>%
  mutate(
    qaqc_rate = ifelse(run == this.run &
                         channel == this.channel, new.rate, qaqc_rate),
    qaqc_r2 = ifelse(run == this.run &
                       channel == this.channel, new.rsq, qaqc_r2),
    qaqc_bg_adj_rate = ifelse(run == this.run &
                       channel == this.channel, new.bg.adj.rate, qaqc_bg_adj_rate)
  )

filter(resp_rates, run == this.run & channel == this.channel) %>% select("run", "channel", "id", "treatment", "qaqc_rate", "qaqc_r2", "qaqc_bg_adj_rate")
```

#### 10.5
```{r}
resp_run_10 %>% select('delta_t', '5') %>% drop_na() %>% 
inspect(time = 'delta_t', oxygen = '5') %>%  auto_rate()
```

```{r}
new10.5 <-  resp_run_10 %>%
  inspect(time = 'delta_t', oxygen = '5') %>%
  calc_rate(from = 0, to = 10, by = 'time')
```

```{r}
### ONLY CHANGE THESE VALUES ###
new.calc <- new10.5
this.run <- 10
this.channel <- 5
################################

new.rate <- new.calc$summary$rate[1]
new.rsq <- new.calc$summary$rsq[1]

blank <- paste0("bg_rate_resp_", this.run)
# new background adjusted object
new.adj <- adjust_rate(new.calc, by = get(blank), method = "mean") 
# from the background-adjusted object, pull the rate
new.bg.adj.rate <- new.adj$summary$rate.adjusted[1]
  
# Add qaqc value to new column based on conditions in 'run' and 'channel' columns
resp_rates <- resp_rates %>%
  mutate(
    qaqc_rate = ifelse(run == this.run &
                         channel == this.channel, new.rate, qaqc_rate),
    qaqc_r2 = ifelse(run == this.run &
                       channel == this.channel, new.rsq, qaqc_r2),
    qaqc_bg_adj_rate = ifelse(run == this.run &
                       channel == this.channel, new.bg.adj.rate, qaqc_bg_adj_rate)
  )

filter(resp_rates, run == this.run & channel == this.channel) %>% select("run", "channel", "id", "treatment", "qaqc_rate", "qaqc_r2", "qaqc_bg_adj_rate")
```

#### 10.7
```{r}
resp_run_10 %>% select('delta_t', '7') %>% drop_na() %>% 
inspect(time = 'delta_t', oxygen = '7') %>%  auto_rate()
```

```{r}
new10.7 <-  resp_run_10 %>%
  inspect(time = 'delta_t', oxygen = '7') %>%
  calc_rate(from = 0, to = 10, by = 'time')
```

```{r}
### ONLY CHANGE THESE VALUES ###
new.calc <- new10.7
this.run <- 10
this.channel <- 7
################################

new.rate <- new.calc$summary$rate[1]
new.rsq <- new.calc$summary$rsq[1]

blank <- paste0("bg_rate_resp_", this.run)
# new background adjusted object
new.adj <- adjust_rate(new.calc, by = get(blank), method = "mean") 
# from the background-adjusted object, pull the rate
new.bg.adj.rate <- new.adj$summary$rate.adjusted[1]
  
# Add qaqc value to new column based on conditions in 'run' and 'channel' columns
resp_rates <- resp_rates %>%
  mutate(
    qaqc_rate = ifelse(run == this.run &
                         channel == this.channel, new.rate, qaqc_rate),
    qaqc_r2 = ifelse(run == this.run &
                       channel == this.channel, new.rsq, qaqc_r2),
    qaqc_bg_adj_rate = ifelse(run == this.run &
                       channel == this.channel, new.bg.adj.rate, qaqc_bg_adj_rate)
  )

filter(resp_rates, run == this.run & channel == this.channel) %>% select("run", "channel", "id", "treatment", "qaqc_rate", "qaqc_r2", "qaqc_bg_adj_rate")
```
#### 11.4
```{r}
resp_run_11 %>% select('delta_t', '4') %>% drop_na() %>% 
inspect(time = 'delta_t', oxygen = '4') %>%  auto_rate()
```

```{r}
new11.4 <-  resp_run_11 %>%
  inspect(time = 'delta_t', oxygen = '4') %>%
  calc_rate(from = 25, to = 30, by = 'time')
```

```{r}
### ONLY CHANGE THESE VALUES ###
new.calc <- new11.4
this.run <- 11
this.channel <- 4
################################

new.rate <- new.calc$summary$rate[1]
new.rsq <- new.calc$summary$rsq[1]

blank <- paste0("bg_rate_resp_", this.run)
# new background adjusted object
new.adj <- adjust_rate(new.calc, by = get(blank), method = "mean") 
# from the background-adjusted object, pull the rate
new.bg.adj.rate <- new.adj$summary$rate.adjusted[1]
  
# Add qaqc value to new column based on conditions in 'run' and 'channel' columns
resp_rates <- resp_rates %>%
  mutate(
    qaqc_rate = ifelse(run == this.run &
                         channel == this.channel, new.rate, qaqc_rate),
    qaqc_r2 = ifelse(run == this.run &
                       channel == this.channel, new.rsq, qaqc_r2),
    qaqc_bg_adj_rate = ifelse(run == this.run &
                       channel == this.channel, new.bg.adj.rate, qaqc_bg_adj_rate)
  )

filter(resp_rates, run == this.run & channel == this.channel) %>% select("run", "channel", "id", "treatment", "qaqc_rate", "qaqc_r2", "qaqc_bg_adj_rate")
```

## Photosynthesis

oxygen production!

The following code should result in a dataframe that has one row for
each respirometry chamber (in this dataset, 55 rows)

```{r}
# Create an empty data frame to store the rates
phot_rates <- data.frame(run = integer(), channel = factor())

# Loop through respirometry runs
for (i in 1:11) {
  # run_num will look like `resp_run_1`, 'resp_run_2', 'resp_run_3', etc.
  run_num <- paste0("phot_run_", i)
  
  # the background object for each run
  blank <- paste0("bg_rate_phot_", i)
  
  # Create an empty data frame to store rates for this run
  stored_rates <- data.frame(run = integer(), 
                        channel = factor(), 
                        auto_phot_rate = numeric(), 
                        auto_phot_r2 = numeric()
                        )
  
  for (j in 2:6) {
    df <- get(run_num) %>%
      select(1, j) %>%
      drop_na()
    
    # use respR inspect() and save it to object `inspected`
    inspected <- inspect(df, time = "delta_t", oxygen = 2)
    
    # pass object `inspected` through respR `auto_rate()`
    auto_rated <- auto_rate(inspected)
    
    # calculate adjusted rate based on run background/blank
    auto_bg_adj <- adjust_rate(auto_rated, by = get(blank), method = "mean")
    
    # Create a data frame to store the rate object information for this channel
    stored_rates_channels <- data.frame(
      run = i,
      channel = as.factor(colnames(get(run_num))[j]),
      auto_phot_rate = auto_rated$summary$rate[1],
      auto_phot_r2 = auto_rated$summary$rsq[1],
      phot_bg_adj_rate = auto_bg_adj$summary$rate.adjusted[1]
    )
    
    # Append the rates for this channel to the stored_rates dataframe
    stored_rates <- bind_rows(stored_rates, stored_rates_channels)
  }
  
  # Append the rates for this run to the resp_rates data frame
  phot_rates <- bind_rows(phot_rates, stored_rates)
}
```

## QAQC photosynthesis rates

```{r}
# Look for rates that are negative
phot_badrates <- phot_rates %>% filter(phot_rate<0)
print(phot_badrates)
```

```{r}
# Look for rate r2 values that are less than 0.8
phot_badr2 <- phot_rates %>% filter(phot_r2<0.8)
print(phot_badr2)
```

```{r}
phot_baddies <- full_join(phot_badr2, phot_badrates)
print(phot_baddies)
```

### 1.7

```{r}
inspect(phot_run_1, time = 'delta_t', oxygen = '7') %>% auto_rate()
```

```{r}
phot_run_1 %>%
  inspect(time = 'delta_t', oxygen = '7') %>%
  calc_rate(from = 52, to = 55, by = 'time')
```

```{r}
newp1.7 <-  phot_run_1 %>%
  inspect(time = 'delta_t', oxygen = '7') %>%
  calc_rate(from = 52, to = 55, by = 'time')

this.run <- 1
this.channel <- 7
new.rate <- newp1.7$summary$rate[1]
new.rsq <- newp1.7$summary$rsq[1]


# Replace value in 'rate' column based on conditions in 'run' and 'channel' columns
phot_rates <- phot_rates %>%
  mutate(phot_rate = case_when(
    run == this.run & channel == this.channel ~ new.rate, TRUE ~ phot_rate  # Keep the original value if no condition is met
  )) %>% 
    mutate(plot_r2 = case_when(
    run == this.run & channel == this.channel ~ new.rsq, TRUE ~ phot_r2  # Keep the original value if no condition is met
  ))

filter(phot_rates, run == this.run & channel == this.channel)
```

### 2.1

```{r}
inspect(phot_run_2, time = 'delta_t', oxygen = '1') %>% auto_rate()
```

no major issue

```{r}
phot_run_2 %>%
  inspect(time = 'delta_t', oxygen = '1') %>%
  calc_rate(from = 50, to = 58, by = 'time')
```

```{r}
newp2.1 <-  phot_run_2 %>%
  inspect(time = 'delta_t', oxygen = '1') %>%
  calc_rate(from = 50, to = 58, by = 'time')

this.run <- 2
this.channel <- 1
new.rate <- newp2.1$summary$rate[1]
new.rsq <- newp2.1$summary$rsq[1]


# Replace value in 'rate' column based on conditions in 'run' and 'channel' columns
phot_rates <- phot_rates %>%
  mutate(phot_rate = case_when(
    run == this.run & channel == this.channel ~ new.rate, TRUE ~ phot_rate  # Keep the original value if no condition is met
  )) %>% 
    mutate(plot_r2 = case_when(
    run == this.run & channel == this.channel ~ new.rsq, TRUE ~ phot_r2  # Keep the original value if no condition is met
  ))

filter(phot_rates, run == this.run & channel == this.channel)
```

### 3.4

```{r}
inspect(phot_run_3, time = 'delta_t', oxygen = '4') %>% auto_rate()
```

```{r}
phot_run_3 %>%
  inspect(time = 'delta_t', oxygen = '4') %>%
  calc_rate(from = 55, to = 60, by = 'time')
```

```{r}
newp3.4 <-  phot_run_3 %>%
  inspect(time = 'delta_t', oxygen = '4') %>%
  calc_rate(from = 55, to = 60, by = 'time')

this.run <- 3
this.channel <- 4
new.rate <- newp3.4$summary$rate[1]
new.rsq <- newp3.4$summary$rsq[1]


# Replace value in 'rate' column based on conditions in 'run' and 'channel' columns
phot_rates <- phot_rates %>%
  mutate(phot_rate = case_when(
    run == this.run & channel == this.channel ~ new.rate, TRUE ~ phot_rate  # Keep the original value if no condition is met
  )) %>% 
    mutate(plot_r2 = case_when(
    run == this.run & channel == this.channel ~ new.rsq, TRUE ~ phot_r2  # Keep the original value if no condition is met
  ))

filter(phot_rates, run == this.run & channel == this.channel)
```

### 3.5

```{r}
inspect(phot_run_3, time = 'delta_t', oxygen = '5') %>% auto_rate()
```

no issue, could check for times 52-55

```{r}
phot_run_3 %>%
  inspect(time = 'delta_t', oxygen = '5') %>%
  calc_rate(from = 52, to = 55, by = 'time')
```

```{r}
newp3.5 <-  phot_run_3 %>%
  inspect(time = 'delta_t', oxygen = '5') %>%
  calc_rate(from = 52, to = 55, by = 'time')

this.run <- 3
this.channel <- 5
new.rate <- newp3.5$summary$rate[1]
new.rsq <- newp3.5$summary$rsq[1]


# Replace value in 'rate' column based on conditions in 'run' and 'channel' columns
phot_rates <- phot_rates %>%
  mutate(phot_rate = case_when(
    run == this.run & channel == this.channel ~ new.rate, TRUE ~ phot_rate  # Keep the original value if no condition is met
  )) %>% 
    mutate(plot_r2 = case_when(
    run == this.run & channel == this.channel ~ new.rsq, TRUE ~ phot_r2  # Keep the original value if no condition is met
  ))

filter(phot_rates, run == this.run & channel == this.channel)
```

r2 is kind of high

### 3.2

```{r}
inspect(phot_run_3, time = 'delta_t', oxygen = '2') %>% auto_rate()
```

```{r}
phot_run_3 %>%
  inspect(time = 'delta_t', oxygen = '2') %>%
  calc_rate(from = 53, to = 55, by = 'time')
```

```{r}
newp3.2 <-  phot_run_3 %>%
  inspect(time = 'delta_t', oxygen = '2') %>%
  calc_rate(from = 53, to = 55, by = 'time')

this.run <- 3
this.channel <- 2
new.rate <- newp3.2$summary$rate[1]
new.rsq <- newp3.2$summary$rsq[1]


# Replace value in 'rate' column based on conditions in 'run' and 'channel' columns
phot_rates <- phot_rates %>%
  mutate(phot_rate = case_when(
    run == this.run & channel == this.channel ~ new.rate, TRUE ~ phot_rate  # Keep the original value if no condition is met
  )) %>% 
    mutate(plot_r2 = case_when(
    run == this.run & channel == this.channel ~ new.rsq, TRUE ~ phot_r2  # Keep the original value if no condition is met
  ))

filter(phot_rates, run == this.run & channel == this.channel)
```

### 3.7

```{r}
inspect(phot_run_3, time = 'delta_t', oxygen = '7') %>% auto_rate()
```

looks okay

```{r}
phot_run_3 %>%
  inspect(time = 'delta_t', oxygen = '7') %>%
  calc_rate(from = 44, to = 52, by = 'time')
```

```{r}
newp3.7 <-  phot_run_3 %>%
  inspect(time = 'delta_t', oxygen = '7') %>%
  calc_rate(from = 44, to = 52, by = 'time')

this.run <- 3
this.channel <- 7
new.rate <- newp3.7$summary$rate[1]
new.rsq <- newp3.7$summary$rsq[1]


# Replace value in 'rate' column based on conditions in 'run' and 'channel' columns
phot_rates <- phot_rates %>%
  mutate(phot_rate = case_when(
    run == this.run & channel == this.channel ~ new.rate, TRUE ~ phot_rate  # Keep the original value if no condition is met
  )) %>% 
    mutate(plot_r2 = case_when(
    run == this.run & channel == this.channel ~ new.rsq, TRUE ~ phot_r2  # Keep the original value if no condition is met
  ))

filter(phot_rates, run == this.run & channel == this.channel)
```

### 7.3

```{r}
inspect(phot_run_7, time = 'delta_t', oxygen = '3') %>% auto_rate()
```

```{r}
phot_run_7 %>%
  inspect(time = 'delta_t', oxygen = '3') %>%
  calc_rate(from = 51, to = 60, by = 'time')
```

```{r}
newp7.3 <-  phot_run_7 %>%
  inspect(time = 'delta_t', oxygen = '3') %>%
  calc_rate(from = 52, to = 60, by = 'time')

this.run <- 7
this.channel <- 3
new.rate <- newp7.3$summary$rate[1]
new.rsq <- newp7.3$summary$rsq[1]


# Replace value in 'rate' column based on conditions in 'run' and 'channel' columns
phot_rates <- phot_rates %>%
  mutate(phot_rate = case_when(
    run == this.run & channel == this.channel ~ new.rate, TRUE ~ phot_rate  # Keep the original value if no condition is met
  )) %>% 
    mutate(plot_r2 = case_when(
    run == this.run & channel == this.channel ~ new.rsq, TRUE ~ phot_r2  # Keep the original value if no condition is met
  ))

filter(phot_rates, run == this.run & channel == this.channel)
```

### 7.4

```{r}
inspect(phot_run_1, time = 'delta_t', oxygen = '7') %>% auto_rate()
```

```{r}

```

```{r}

```

### 7.1

```{r}
inspect(phot_run_1, time = 'delta_t', oxygen = '7') %>% auto_rate()
```

```{r}
phot_run_1 %>%
  inspect(time = 'delta_t', oxygen = '7') %>%
  calc_rate(from = 52, to = 55, by = 'time')
```

```{r}
newp1.7 <-  phot_run_1 %>%
  inspect(time = 'delta_t', oxygen = '7') %>%
  calc_rate(from = 52, to = 55, by = 'time')

this.run <- 1
this.channel <- 7
new.rate <- newp1.7$summary$rate[1]
new.rsq <- newp1.7$summary$rsq[1]


# Replace value in 'rate' column based on conditions in 'run' and 'channel' columns
phot_rates <- phot_rates %>%
  mutate(phot_rate = case_when(
    run == this.run & channel == this.channel ~ new.rate, TRUE ~ phot_rate  # Keep the original value if no condition is met
  )) %>% 
    mutate(plot_r2 = case_when(
    run == this.run & channel == this.channel ~ new.rsq, TRUE ~ phot_r2  # Keep the original value if no condition is met
  ))

filter(phot_rates, run == this.run & channel == this.channel)
```

### 10.1

```{r}
inspect(phot_run_10, time = 'delta_t', oxygen = '1') %>% auto_rate()
```

```{r}
phot_run_1 %>%
  inspect(time = 'delta_t', oxygen = '7') %>%
  calc_rate(from = 52, to = 55, by = 'time')
```

```{r}
newp1.7 <-  phot_run_1 %>%
  inspect(time = 'delta_t', oxygen = '7') %>%
  calc_rate(from = 52, to = 55, by = 'time')

this.run <- 1
this.channel <- 7
new.rate <- newp1.7$summary$rate[1]
new.rsq <- newp1.7$summary$rsq[1]


# Replace value in 'rate' column based on conditions in 'run' and 'channel' columns
phot_rates <- phot_rates %>%
  mutate(phot_rate = case_when(
    run == this.run & channel == this.channel ~ new.rate, TRUE ~ phot_rate  # Keep the original value if no condition is met
  )) %>% 
    mutate(plot_r2 = case_when(
    run == this.run & channel == this.channel ~ new.rsq, TRUE ~ phot_r2  # Keep the original value if no condition is met
  ))

filter(phot_rates, run == this.run & channel == this.channel)
```

# Join the P&R rates data

Join the respiration rates and photosynthesis rates dataframes

```{r}
rates <- left_join(resp_rates, phot_rates)
```

# Join the rates to metadata

Each row in the metadata file relates to a run and a channel, we have to
join the data by run and channel so that the big dataframe has a column
for id, treatment, and wet weight

```{r}
rates_all_cols <- left_join(rates, merged_metadata)
```

### Are the blanks significantly different?

```         
```

Let's trim it down to make working with this a bit easier by selecting
just the columns we really care about

```{r}
rates_select_cols <- rates_all_cols %>% select(
  "id", 
  "treatment", 
  "run", 
  "channel", 
  "auto_resp_rate", 
  "auto_resp_r2",
  "resp_bg_adj.rate",
  "resp_bg_r2",
  "auto_phot_rate", 
  "auto_phot_r2", 
  "phot_bg_adj.rate",
  "phot_bg_r2",
  "wet_weight_g"
  )
```

```{r}
head(rates_select_cols)
```

# Normalize by wet_weight

```{r}
rates_select_cols$wet_weight_kg <- rates_select_cols$wet_weight_g*0.001
```

Using respR
[convert_rate()](https://januarharianto.github.io/respR/reference/convert_rate.html)
by mass

The oxygen units are in ppm (mg/L)

The time units are in min

respirometer effective volume: 317mL = 0.317L

```{r}

# Convert a single numeric rate to a mass-specific rate
cr <- convert_rate(-0.09, oxy.unit = 'mg/L', time.unit = 'mins',
  output.unit = 'mg/min/g', volume = 0.3, mass = 0.5)

summary(cr)
```

```{r}
rates_select_cols <- rates_select_cols %>%
  mutate(
    massnorm_resp_rate = convert_rate(
      auto_resp_rate,
      oxy.unit = 'mg/l',
      time.unit = 'm',
      output.unit = 'mg/min/g',
      volume = 0.317,
      mass = wet_weight_g
    )$rate.output # Extracting numeric values from the convert_rate object
  )

```

```{r}
rates_select_cols <- rates_select_cols %>%
  mutate(
    massnorm_phot_rate = convert_rate(
      auto_phot_rate,
      oxy.unit = 'mg/l',
      time.unit = 'm',
      output.unit = 'mg/min/g',
      volume = 0.317,
      mass = wet_weight_g
    )$rate.output # Extracting numeric values from the convert_rate object
  )
```

```{r}
write.csv(rates_select_cols, "rates.csv", row.names = FALSE)
```
