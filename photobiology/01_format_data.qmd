---
title: "Respirometry analysis: Part 1"
subtitle: "Pull in data and format it for use in the `respR` package"
author: "Sarah Tanja"
date: "`r format(Sys.time(), '%d %B, %Y')`"  
format:
  html:
    df-print: paged
    toc: true
    toc-location: right
    smooth-scroll: true
    link-external-icon: true
    link-external-newwindow: true
    code-fold: false
    code-tools: true
    code-copy: true
    highlight-style: breeze
    code-overflow: wrap
    theme: minty
editor: 
  markdown: 
    wrap: 72
---
# Install and load packages

```{r}
# Install packages
if ("tidyverse" %in% rownames(installed.packages()) == 'FALSE') install.packages('tidyverse')
if ("dplyr" %in% rownames(installed.packages()) == 'FALSE') install.packages('dplyr')
if ("lubridate" %in% rownames(installed.packages()) == 'FALSE') install.packages('lubridate')
if ("respR" %in% rownames(installed.packages()) == 'FALSE') install.packages('respR')
if ("openai" %in% rownames(installed.packages()) == 'FALSE') install.packages('openai')

# Load packages
library(dplyr)
library(tidyverse)
library(lubridate)
library(respR)
library(openai)

```

# Pull in metadata
```{r}
nem_metadata <- read_csv("../metadata/nem_metadata.csv")
```

# Pull in data
```{r}
rlc_og <- read_csv("data/ALL55_anemones_RLSs_26APR2024.csv")
```

# Make empty dataframe of desired format

```{r}
photobot <- data.frame(c(
  'id' = , 
  'treatment',
  'alpha',
  'rETRmax',
  'Ik',
  'FvFm'))
```


# Fill in the dataframe values with values from the rlc data

```{r}
rlc <- rlc_og %>% filter(!is.na(No.))
```

```{r}
# Join metadata with data by matching "No." to "RLC_start"
rlc_mer <- left_join(rlc, nem_metadata, by = c("No." = "RLC_start")) 

# Bring the "RLC_start" column back in by re-joining to the metadata
rlc_merged <- left_join(rlc_mer, nem_metadata)

```


```{r}
rlc_merged_filter <- rlc_merged %>% 
  filter(No. >= 55 & No. <= 67)
```

```{r}
# Create an empty list to store filtered dataframe
rlc_list <- list()

# Loop through each row
for (i in 1:nrow(rlc_merged)){
  start <- rlc_merged$RLC_start[i]
  end <- rlc_merged$RLC_end[i]
  
  # skip if RLC_start or RLC_end is NA
  if(is.na(start) || is.na(end)) next
  
  #
  if (start == rlc_merged$No.[i]){
    rlc_filtered <- rlc_merged %>% 
      filter(No. >= start & No. <= end)
    
    # Store the filtered dataframe in the list
    rlc_list[[length(rlc_list) + 1]] <- rlc_list
  }
}


```






```{r}
# A function to filter dataframe based on RLC_start and RLC_stop
filter_range <- function(start, end, data) {
  data %>% 
    filter('No.' >= start & 'No.' <= end)
}

```

```{r}
rlc_list <- map2(rlc_merged$RLC_start, rlc_merged$RLC_end, ~ filter_range(.x, .y, rlc_merged))
```

